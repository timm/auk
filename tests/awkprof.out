	# gawk profile, created Tue Dec 15 17:31:17 2020

	# BEGIN rule(s)

	BEGIN {
     1  	Gold["dot"] = sprintf("%c", 46)
     1  	Gold["dots"] = Gold["dot"] Gold["dot"]
     1  	Gold["seed"] = 1
     1  	Gold["pi"] = 3.1415926535
     1  	Gold["e"] = 2.7182818284
     1  	Gold["id"] = 0
	}

	BEGIN {
     1  	Gold["scale"]["Tab"]["samples"] = 64
     1  	Gold["scale"]["Some"]["div"]["min"] = 0.5
     1  	Gold["scale"]["Some"]["div"]["epsilon"] = 0.3
	}

	BEGIN {
     1  	srand(Gold["seed"] ? Gold["seed"] : 1)
     1  	main("auto93")
     1  	rogues()
	}


	# Functions, listed alphabetically

     9  function Col(i, pos, txt)
	{
     9  	Obj(i)
     9  	is(i, "Col")
     9  	i["pos"] = pos
     9  	i["txt"] = txt
     9  	i["n"] = 0
     9  	i["w"] = txt ~ /</ ? -1 : 1
	}

	function HAS(i, k, f, x, y, z)
	{
		new(i, k)
		@f(i[k], x, y, z)
	}

   408  function Obj(i)
	{
   408  	i["id"] = ++Gold["id"]
	}

   398  function Row(i, a, t, j)
	{
   398  	Obj(i)
   398  	is(i, "Row")
   398  	i["dom"] = 0
   398  	has(i, "cells")
  3184  	for (j in a) {
  3184  		i["cells"][j] = add(t["cols"][j], a[j])
		}
	}

 11171  function RowDom(i, j, t, n, e, c, w, x, y, sum1, sum2)
	{
 11171  	n = length(t["ys"])
 33513  	for (c in t["ys"]) {
 33513  		w = t["cols"][c]["w"]
 33513  		x = SomeNorm(t["cols"][c], i["cells"][c])
 33513  		y = SomeNorm(t["cols"][c], j["cells"][c])
 33513  		sum1 -= 2.71828 ^ (w * (x - y) / n)
 33513  		sum2 -= 2.71828 ^ (w * (y - x) / n)
		}
 11171  	return (sum1 / n < sum2 / n)
	}

	function Skip(i, pos, txt)
	{
		Col(i, pos, txt)
		is(i, "Skip")
	}

	function SkipAdd(i, x)
	{
		return x
	}

     7  function Some(i, pos, txt)
	{
     7  	Col(i, pos, txt)
     7  	is(i, "Some")
     7  	i["ok"] = 1
     7  	i["want"] = 128
     7  	i["lo"] = 1E30
     7  	i["hi"] = -1E30
     7  	has(i, "all")
	}

  2786  function SomeAdd(i, x, len, pos)
	{
  2786  	if (x != "?") { # 2780
  2780  		i["n"]++
  2780  		len = length(i["all"])
  2780  		if (i["n"] < i["want"]) { # 889
   889  			pos = len + 1
  1891  		} else if (rand() < i["want"] / i["n"]) { # 1021
  1021  			pos = int(len * rand())
			}
  2780  		if (pos) { # 1903
  1903  			if (x < i["lo"]) { # 37
    37  				i["lo"] = x
				}
  1903  			if (x > i["hi"]) { # 87
    87  				i["hi"] = x
				}
  1903  			i["ok"] = 0
  1903  			i["all"][pos] = x
			}
		}
  2786  	return x
	}

     7  function SomeDiv(i, x, bins, eps, min, b, n, lo, hi, b4, len)
	{
     7  	SomeOk(i)
     7  	eps = Gold["scale"]["Some"]["div"]["epsilon"]
     7  	min = Gold["scale"]["Some"]["div"]["min"]
     7  	eps = SomeSd(i) * eps
     7  	len = length(i["all"])
     7  	n = len ^ min
		while (n < 4 && n < len / 2) {
			n *= 1.2
		}
     7  	n = int(n)
     7  	lo = 1
     7  	b = b4 = 0
   334  	for (hi = n; hi <= len - n; hi++) {
   334  		if (hi - lo > n) { # 320
   320  			if (i["all"][hi] != i["all"][hi + 1]) { # 107
   107  				if (b4 == 0 || (SomeMid(i, lo, hi) - b4) >= eps) { # 39
    39  					i["bins"][++b] = i["all"][hi]
    39  					b4 = SomeMid(i, lo, hi)
    39  					lo = hi
    39  					hi += n
					}
				}
			}
		}
	}

   138  function SomeMid(i, lo, hi)
	{
   138  	return SomePer(i, .5, lo, hi)
	}

 67026  function SomeNorm(i, x, n)
	{
 67026  	if (x == "?") {
			return x
		}
 67026  	x = (x - i["lo"]) / (i["hi"] - i["lo"] + 1E-32)
 67026  	return (x < 0 ? 0 : (x > 1 ? 1 : x))
	}

   159  function SomeOk(i)
	{
   159  	i["ok"] = i["ok"] ? i["ok"] : asort(i["all"])
	}

   152  function SomePer(i, p, lo, hi)
	{
   152  	SomeOk(i)
   152  	lo = lo ? lo : 1
   152  	hi = hi ? hi : length(i["all"])
   152  	return i["all"][int(lo + p * (hi - lo))]
	}

     7  function SomeSd(i, lo, hi)
	{
     7  	return (SomePer(i, .9, lo, hi) - SomePer(i, .1, lo, hi)) / 2.54
	}

     2  function Sym(i, pos, txt)
	{
     2  	Col(i, pos, txt)
     2  	is(i, "Sym")
     2  	has(i, "seen")
     2  	has(i, "bins")
     2  	i["mode"] = i["most"] = ""
	}

   796  function SymAdd(i, x, d, n)
	{
   796  	if (x != "?") { # 796
   796  		n = ++i["some"][x]
   796  		if (n > i["most"]) { # 453
   453  			i["most"] = n
   453  			i["mode"] = x
			}
		}
   796  	return x
	}

     1  function Tab(i)
	{
     1  	Obj(i)
     1  	is(i, "Tab")
     1  	has(i, "xs")
     1  	has(i, "ys")
     1  	has(i, "rows")
     1  	has(i, "cols")
	}

   399  function TabAdd(i, a, j)
	{
   399  	if (length(i["cols"]) > 1) { # 398
   398  		hAS(i["rows"], int(1E9 * rand()), "Row", a, i)
     1  	} else {
     8  		for (j in a) {
     8  			hAS(i["cols"], j, TabWhat(i, j, a[j]), j, a[j])
			}
		}
	}

     1  function TabDom(i, order, n, j, k)
	{
   398  	for (j in i["rows"]) {
   398  		n = Gold["scale"]["Tab"]["samples"]
 25870  		for (k in i["rows"]) {
 25870  			if (--n < 0) { # 398
   398  				break
				}
 25472  			if (i["rows"][j]["id"] > i["rows"][k]["id"]) { # 11171
 11171  				i["rows"][j]["dom"] += RowDom(i["rows"][j], i["rows"][k], i)
				}
			}
		}
     1  	return keysorT(i["rows"], order, "dom")
	}

     1  function TabRead(i, f, a)
	{
   399  	while (csv(a, f)) {
   399  		add(i, a)
		}
	}

     8  function TabWhat(i, pos, txt, x, where)
	{
     8  	x = "Sym"
     8  	if (txt ~ /[<>:]/) { # 6
     6  		x = "Some"
		}
     8  	if (txt ~ /\?/) {
			x = "Skip"
		}
     8  	if (x != "Skip") { # 8
     8  		where = txt ~ /[<>!]/ ? "ys" : "xs"
     8  		i[where][pos]
		}
     8  	return x
	}

  3981  function add(i, x, f)
	{
  3981  	f = does(i["is"], "Add")
  3981  	return @f(i, x)
	}

	function auk2awk(f, klass, tmp)
	{
		while (getline < f) {
			if (/^#</) {
				do {
					print "# " $0
				} while ((getline < f) && (! /^#>/))
				print $0
			}
			if (/^func(tion)?[ \t]+[A-Z][^\(]*\(/) {
				split($0, tmp, /[ \t\(]/)
				klass = tmp[2]
			}
			gsub(/ _/, " " klass, $0)
			print gensub(/\.([^0-9\\*\\$\\+])([a-zA-Z0-9_]*)/, "[\"\\1\\2\"]", "g", $0)
		}
	}

   400  function csv(a, f, b4, g, txt, i, old, new)
	{
   400  	f = f ? f : "-"
   400  	g = getline < f
   400  	if (g < 0) {
			print "#E> Missing file [" f "]"
			exit 1
		}
   400  	if (g == 0) { # 1
     1  		close(f)
     1  		return 0
		}
   399  	txt = b4 $0
   399  	gsub(/[ \t]+/, "", txt)
   399  	if (txt ~ /,$/) {
			return csv(a, f, txt)
		}
   399  	sub(/#.*/, "", txt)
   399  	if (! txt) {
			return csv(a, f, txt)
		}
   399  	split(txt, a, ",")
  3192  	for (i in a) {
  3192  		old = a[i]
  3192  		new = a[i] + 0
  3192  		a[i] = (old == new) ? new : old
		}
   399  	return 1
	}

     1  function data(f)
	{
     1  	return (Gold["dots"] "/data/" f Gold["dot"] "csv")
	}

  3981  function does(k, f, s)
	{
  3981  	do {
  3981  		s = k f
  3981  		if (s in FUNCTAB) { # 3981
  3981  			return s
			}
		} while (k = Gold["is"][k])
		print "E> method not found " f
		exit 1
	}

   406  function hAS(i, k, f, x, y)
	{
   406  	new(i, k)
   406  	@f(i[k], x, y)
	}

	function haS(i, k, f, x)
	{
		new(i, k)
		@f(i[k], x)
	}

   413  function has(i, k, f)
	{
   413  	new(i, k)
   413  	if (f) {
			@f(i[k])
		}
	}

   417  function is(i, new, old)
	{
   417  	if ("is" in i) { # 9
     9  		Gold["is"][new] = old
		}
   417  	i["is"] = new
	}

	function it(i, f)
	{
		f = does(i["is"], "It")
		return @f(i)
	}

     1  function keysorT(a, b, k)
	{
     1  	Gold["keysort"] = k
     1  	return asort(a, b, "keysrt")
	}

	function keysort(a, k)
	{
		Gold["keysort"] = k
		return asort(a, a, "keysrt")
	}

  2117  function keysrt(i1, x, i2, y)
	{
  2117  	return keysrtCompare(x[Gold["keysort"]] + 0, y[Gold["keysort"]] + 0)
	}

  2117  function keysrtCompare(x, y)
	{
  2117  	return (x < y ? -1 : (x == y ? 0 : 1))
	}

     1  function last(a)
	{
     1  	return a[length(a)]
	}

	function mORE(i, f, x, y, z)
	{
		HAS(i, length(i) + 1, f, x, y, z)
	}

     1  function main(f, c, i, j, n, s, order)
	{
     1  	Tab(i)
     1  	TabRead(i, data(f ? f : "weather"))
     1  	n = TabDom(i, order)
     1  	Some(s)
   398  	for (j = 1; j <= n; j++) {
   398  		add(s, order[j]["dom"])
		}
     1  	SomeDiv(s)
     1  	print last(s["bins"]), order[n]["dom"]
     8  	for (c in i["cols"]) {
     8  		if (i["cols"][c]["is"] == "Some") { # 6
     6  			SomeDiv(i["cols"][c])
			}
		}
	}

	function moRE(i, f, x, y)
	{
		hAS(i, length(i) + 1, f, x, y)
	}

	function morE(i, f, x)
	{
		haS(i, length(i) + 1, f, x)
	}

	function more(i, f)
	{
		has(i, length(i) + 1, f)
	}

   819  function new(i, k)
	{
   819  	i[k]["W"]
   819  	delete i[k]["W"]
	}

	function o(a, prefix, i, sep, s)
	{
		for (i in a) {
			s = s sep prefix a[i]
			sep = ","
		}
		return s
	}

	function oo(a, prefix, indent, i, txt)
	{
		txt = indent ? indent : (prefix ? prefix Gold["dot"] : "")
		if (! isarray(a)) {
			print (a)
			return a
		}
		ooSortOrder(a)
		for (i in a) {
			if (isarray(a[i])) {
				print (txt i "")
				oo(a[i], "", "|  " indent)
			} else {
				print (txt i (a[i] == "" ? "" : ": " a[i]))
			}
		}
	}

	function ooSortOrder(a, i)
	{
		for (i in a) {
			return (PROCINFO["sorted_in"] = typeof(i + 1) == "number" ? "@ind_num_asc" : "@ind_str_asc")
		}
	}

	function push(x, a)
	{
		a[length(a) + 1] = x
		return x
	}

     1  function rogues(s, ignore)
	{
    29  	for (s in SYMTAB) {
    29  		if (s ~ /^[_a-z]/) {
				print("#W> Rogue: " s) > "/dev/stderr"
			}
		}
	}

	function rows(a, f, g, txt)
	{
		f = f ? f : "-"
		g = getline < f
		if (g < 0) {
			print "#E> Missing file [" f "]"
			exit 1
		}
		if (g == 0) {
			close(f)
			return 0
		}
		delete a
		split($0, a, ",")
		return 1
	}
